# frozen_string_literal: true

require "omniauth"
require "omniauth/strategies/helsinki"
require "henkilotunnus"

require_relative "helsinki_profile/version"
require_relative "helsinki_profile/engine"
require_relative "helsinki_profile/authentication"
require_relative "helsinki_profile/verification"
require_relative "helsinki_profile/mail_interceptors"
require_relative "helsinki_profile/oidc"
require_relative "helsinki_profile/gdpr_api"

module Decidim
  module HelsinkiProfile
    autoload :FormBuilder, "decidim/helsinki_profile/form_builder"

    include ActiveSupport::Configurable

    @configured = false

    # Defines the email domain for the auto-generated email addresses for the
    # user accounts. This is only used if the user does not have an email
    # address returned by HelsinkiProfile. Not all people have email address
    # stored there and some people may have incorrect email address stored
    # there.
    #
    # In case this is defined, the user will be automatically assigned an email
    # such as "helsinkiprofile-identifier@auto-email-domain.fi" upon their
    # registration.
    #
    # In case this is not defined, the default is the organization's domain.
    config_accessor :auto_email_domain

    # The requested OpenID scopes for the Omniauth strategy. The data returned
    # by the authentication service can differ depending on the defined scopes.
    #
    # See: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes
    config_accessor :auth_scopes do
      [:openid, :email, :profile]
    end

    # Allows customizing the authorization workflow e.g. for adding custom
    # workflow options or configuring an action authorizer for the
    # particular needs.
    config_accessor :workflow_configurator do
      lambda do |workflow|
        workflow.expires_in = 90.days
      end
    end

    # Allows customizing parts of the authentication flow such as validating
    # the authorization data before allowing the user to be authenticated.
    config_accessor :authenticator_class do
      Decidim::HelsinkiProfile::Authentication::Authenticator
    end

    # Allows customizing how the authorization metadata gets collected from
    # the OAuth attributes passed from the authorization endpoint.
    config_accessor :metadata_collector_class do
      Decidim::HelsinkiProfile::Verification::MetadataCollector
    end

    # Even if some authentication services (amr) would report emails as
    # verified, we cannot possibly trust them. For instance, Suomi.fi does not
    # verify the emails entered by the users.
    config_accessor :untrusted_email_providers do
      %w(suomi_fi heltunnistus_suomi_fi)
    end

    def self.configured?
      return false unless Rails.application.secrets.omniauth.has_key?(:helsinki)

      Rails.application.secrets.omniauth[:helsinki][:enabled]
    end

    def self.gdpr_scopes
      return {} unless configured?

      # See:
      # https://profile-api.dev.hel.ninja/docs/gdpr-api/
      gdpr_uri = Rails.application.secrets.omniauth[:helsinki][:gdpr_uri]
      {
        query: "#{gdpr_uri}.gdprquery",
        delete: "#{gdpr_uri}.gdprdelete"
      }
    end

    # Make sure the SWD discovery requests (generated by the openid_connect gem)
    # will succeed also with the "http" URI scheme, so it does not force the
    # authentication endpoint to be secured (e.g. in development environment).
    #
    # This is needed both for the Omniauth strategy as well as the local
    # Oidc::Connector class.
    def self.discovery_request(uri)
      orig_url_builder = SWD.url_builder
      SWD.url_builder = URI::HTTP if uri.match?(%r{^http://})
      result = yield
      SWD.url_builder = orig_url_builder
      result
    end

    def self.authenticator_for(organization, oauth_hash)
      authenticator_class.new(organization, oauth_hash)
    end

    def self.omniauth_settings
      secrets = Rails.application.secrets.omniauth[:helsinki]
      server_uri = secrets[:auth_uri]
      client_id = secrets[:auth_client_id]
      client_secret = secrets[:auth_client_secret]

      auth_uri = URI.parse(server_uri)
      {
        issuer: server_uri,
        scope: auth_scopes,
        client_options: {
          port: auth_uri.port,
          scheme: auth_uri.scheme,
          host: auth_uri.host,
          identifier: client_id,
          secret: client_secret,
          redirect_uri: "#{application_host}/users/auth/helsinki/callback"
        },
        post_logout_redirect_uri: "#{application_host}/users/auth/helsinki/post_logout"
      }
    end

    # Used to determine the callback URLs.
    def self.application_host
      conf = Rails.application.config
      url_options = conf.action_controller.default_url_options
      url_options = conf.action_mailer.default_url_options if !url_options || !url_options[:host]
      url_options ||= {}
      host, port = host_and_port_setting(url_options)

      return "#{host}:#{port}" if port && [80, 443].exclude?(port.to_i)

      host
    end

    def self.host_and_port_setting(url_options)
      host = url_options[:host]
      port = url_options[:port]
      if host.blank?
        # Default to local development environment
        host = "http://localhost"
        port ||= 3000
      elsif host !~ %r{^https?://}
        protocol = url_options[:protocol] || "https"
        host = "#{protocol}://#{host}"
      end
      [host, port]
    end

    private_class_method :host_and_port_setting
  end
end
